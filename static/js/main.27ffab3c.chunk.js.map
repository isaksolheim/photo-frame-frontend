{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","useState","files","setFiles","response","setResponse","useDropzone","accept","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","key","name","src","alt","useEffect","forEach","revokeObjectURL","className","length","onClick","reader","FileReader","readAsDataURL","onloadend","img","base64data","result","fetch","method","headers","body","JSON","stringify","data","then","res","console","log","status","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kPAsFeA,MAlFf,SAAaC,GAAQ,IAAD,EACQC,mBAAS,IADjB,mBACXC,EADW,KACJC,EADI,OAEcF,mBAAS,IAFvB,mBAEXG,EAFW,KAEDC,EAFC,OAGsBC,YAAY,CAClDC,OAAQ,UACRC,OAAQ,SAAAC,GACNN,EACEM,EAAcC,KAAI,SAAAC,GAAI,OACpBC,OAAOC,OAAOF,EAAM,CAClBG,QAASC,IAAIC,gBAAgBL,YAN/BM,EAHU,EAGVA,aAAcC,EAHJ,EAGIA,cAahBJ,EAAUZ,EAAMQ,KAAI,SAAAC,GAAI,OAC5B,yBAAKQ,IAAKR,EAAKS,MACb,6BACE,yBAAKC,IAAKV,EAAKG,QAASQ,IAAI,iBA2BlC,OAtBAC,qBACE,kBAAM,WACJrB,EAAMsB,SAAQ,SAAAb,GAAI,OAAII,IAAIU,gBAAgBd,EAAKG,eAEjD,CAACZ,IAmBD,6BAASwB,UAAU,OACjB,wBAAST,EAAa,CAAES,UAAW,aACjC,0BAAWR,KACX,yBAAKQ,UAAU,UAAf,eAGgB,IAAjBxB,EAAMyB,QACL,oCACE,2CACA,+BAAQb,GACR,yBACEY,UAAU,SACVE,QAAS,WACP,IAAMC,EAAS,IAAIC,WACnB5B,EAAMsB,SAAQ,SAAAb,GACZkB,EAAOE,cAAcpB,GACrBkB,EAAOG,UAAY,WACjB,IAjCGC,EAiCCC,EAAaL,EAAOM,OACE,kBAAfD,IAlCRD,EAmCSC,EAlC1BE,MAAM,+BAAgC,CACpCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,KAAMT,MAE5BU,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,QAChB1C,EAAYuC,EAAIG,WAEjBC,OAAM,SAAAC,GAAK,OAAI5C,EAAYmC,KAAKC,UAAUQ,cAcvC,aAoBJ,2BAAiB,MAAb7C,EAAmB,wBAA0BA,KCrEnC8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAMgB,a","file":"static/js/main.27ffab3c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { useDropzone } from 'react-dropzone';\n\nfunction App(props) {\n  const [files, setFiles] = useState([]);\n  const [response, setResponse] = useState('');\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: 'image/*',\n    onDrop: acceptedFiles => {\n      setFiles(\n        acceptedFiles.map(file =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file)\n          })\n        )\n      );\n    }\n  });\n\n  const preview = files.map(file => (\n    <div key={file.name}>\n      <div>\n        <img src={file.preview} alt='preview' />\n      </div>\n    </div>\n  ));\n\n  useEffect(\n    () => () => {\n      files.forEach(file => URL.revokeObjectURL(file.preview));\n    },\n    [files]\n  );\n\n  function postImage(img) {\n    fetch('http://10.0.0.23:3001/create', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ data: img })\n    })\n      .then(res => {\n        console.log(res.status);\n        setResponse(res.status);\n      })\n      .catch(error => setResponse(JSON.stringify(error)));\n  }\n\n  return (\n    <section className='App'>\n      <div {...getRootProps({ className: 'dropzone' })}>\n        <input {...getInputProps()} />\n        <div className='button'>VELG BILDE</div>\n      </div>\n\n      {files.length !== 0 && (\n        <>\n          <p>Valgt bilde:</p>\n          <aside>{preview}</aside>\n          <div\n            className='button'\n            onClick={() => {\n              const reader = new FileReader();\n              files.forEach(file => {\n                reader.readAsDataURL(file);\n                reader.onloadend = function() {\n                  var base64data = reader.result;\n                  if (typeof base64data === 'string') {\n                    postImage(base64data);\n                  }\n                };\n              });\n            }}\n          >\n            LAST OPP\n          </div>\n        </>\n      )}\n\n      <p>{response === 200 ? 'Bildet ble lastet opp' : response}</p>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}